---
description: Setting architecture for projects
globs: *.rs,*.toml,*.c,*.h,*.sh
alwaysApply: true
---

# FujiNet HAL Architecture Rules

FujiNet is a multi-peripheral emulator and WiFi network device for vintage computers.
The first completed hardware was for the Atari 8-Bit line of computers and development
has begun for other systems (Coleco ADAM, Apple II, Commodore 64, Atari Lynx, ZX Spectrum
and more) with the goal of supporting as many old systems as possible.

What sets FujiNet apart from other WiFi devices is the new Network Device (the N Device).
The N device allows vintage computers that do not have enough processing power to handle
TCP/IP connections themselves to talk to the modern internet over WiFi. Virtual adapters
have been created for many protocols including: TCP, UDP, HTTP, FTP, TNFS, HTTPS (SSL/TLS),
SSH, TELNET, WebDAV and JSON parser.

Examples of Fujinet include:
- an esp32 adapter that plugs into an Atari 8 bit machine on the SIO port.
- an esp32 adapter that plugs into an Apple2 8 bit machine on the drive port using SmartPort protocol.
- an application running on X86 hardware that communicates over TCP 


In order to work as an application, or a library, this project follows Hardware Abstraction Layer principles.

## Layer Architecture

### 1. Device Layer (src/device/)
- Contains platform-agnostic device implementations
- Defines core traits and interfaces
- Handles protocol-specific logic
- Key components:
  - NetworkUrl: Parses device specifications
  - BaseHttpClient: Common HTTP functionality
  - NetworkDevice: Generic network device implementation

### 2. Platform Layer (src/platform/)
- Contains platform-specific implementations
- Implements device traits for specific platforms
- Handles platform-specific details
- Key components:
  - X86HttpClient: Platform-specific HTTP implementation
  - Platform-specific error handling
  - Platform-specific initialization

### 3. Adapters Layer (src/adapters/)
- Provides adapters for different ways of accessing the library:
  - FFI: Direct C/C++ library integration
  - SIO: Atari serial interface protocol
  - SmartPort: Apple II disk protocol
  - TCP: Network socket based protocol
  - HTTP: RESTful web service
- Each adapter implements its own:
  - Request/response handling
  - Protocol-specific state management
  - Error mapping
  - Resource management

### 4. FFI Adapter (src/adapters/ffi/)
- An adapter type when including the project as a library in the client application directly without any communication separation like SIO, serial, SmartPort etc.
- Provides C/C++ interface bindings
- Handles C-Rust type conversions
- Maps internal errors to C error codes
- Key components:
  - FFI function declarations
  - Type conversion utilities
  - Error code mapping
  - Memory management utilities

### Module Organization Rules

1. `mod.rs` files should only be used to:
   - Declare submodules
   - Re-export public items from submodules
   - Provide module-level documentation
2. All implementation code should be in appropriately named files
3. File names should clearly indicate their purpose
4. Avoid hiding complex logic in `mod.rs` files
5. Use `mod.rs` for organization, not implementation

## Error Handling

### Device Layer Errors
- DeviceError enum for platform-agnostic errors
- Protocol-specific error types
- Connection state errors

### Platform Layer Errors
- Platform-specific error handling
- Maps device errors to platform errors
- Network-specific error conditions

### Adapter Layer Errors
- Each adapter defines its own error types/codes
- Maps platform and device errors to protocol-specific errors
- Handles protocol-specific error states
- Examples:
  - FFI: FN_ERR_* C error codes
  - SIO: Atari error codes
  - HTTP: Standard HTTP status codes

## Network Protocol Support

### HTTP/HTTPS
- Base implementation in device layer
- Platform-specific implementation in platform layer
- Host translation in host layer
- C interface in FFI layer

### Future Protocols
- Add new protocol support in device layer
- Implement platform support in platform layer
- Create new adapter in adapters/ for protocol-specific client interface

## Development Guidelines

1. Keep platform-agnostic device concept related code in device layer
2. Platform-specific code belongs in platform layer
3. Adapters are managed as sub-folders in the Adapters layer
4. C interface code belongs in FFI layer as an example adapter
5. Use existing error handling patterns
6. Follow established protocol implementation patterns
7. Maintain separation of concerns between layers
8. Use existing URL parsing and protocol handling
9. Add new protocols by extending existing patterns

## Adapter Development Guidelines
1. Create new adapters only for concrete use cases
2. Each adapter should be self-contained in its subdirectory
3. Implement clear request/response patterns
4. Handle protocol-specific error mapping
5. Document protocol specifications and requirements
6. Provide protocol-specific examples and tests

## Testing

### Test Organization
- Tests organized by layer:
  - `tests/device/`: Core device implementations
  - `tests/platform/`: Platform-specific features
  - `tests/adapters/`: Protocol adapter tests
    - `ffi/`: C interface tests
    - `sio/`: Atari protocol tests
    - `smartport/`: Apple II protocol tests
    - etc.

### Device Layer Tests (`tests/device/`)
- Unit tests for core functionality
  - `network_device_test.rs`: Network device implementation tests
  - `url_test.rs`: URL parsing and validation tests
  - `protocols/`: Protocol-specific test implementations
- Test requirements:
  - Must use async/await for async operations
  - Must test error conditions and edge cases
  - Must verify protocol-specific behavior
  - Must use mock implementations where appropriate

### Platform Layer Tests (`tests/platform/`)
- Platform-specific implementation tests
  - `x86/`: X86 platform specific tests
  - `network/`: Network implementation tests
- Test requirements:
  - Must test platform-specific features
  - Must verify integration with device layer
  - Must test error handling and recovery
  - Must use platform-specific test utilities

### FFI Adapter Layer Tests (`tests/adapters/ffi/`)
- C interface binding tests
  - `device_test.rs`: Device FFI tests
  - `platform_test.rs`: Platform FFI tests
  - `error_test.rs`: Error code mapping tests
- Test requirements:
  - Must verify correct type conversion
  - Must test error code mapping
  - Must verify memory safety
  - Must test null pointer handling

### C Interface Tests (`tests/c/`)
- Integration tests for C interface
  - `fujinet-network_test.c`: Network interface tests
- Test requirements:
  - Must verify C interface contracts
  - Must test error handling
  - Must verify memory management
  - Must test all exported functions

### Test Guidelines
1. Each test file should focus on a single component
2. Use descriptive test names that indicate the test purpose
3. Include both positive and negative test cases
4. Document test requirements and assumptions
5. Use appropriate test attributes (e.g., #[tokio::test])
6. Follow the same layer separation as the main code
7. Maintain test isolation and independence
8. Use appropriate test fixtures and setup/teardown
