---
description: Setting architecture for projects
globs: 
alwaysApply: false
---
# FujiNet HAL Architecture Rules

FujiNet is a multi-peripheral emulator and WiFi network device for vintage computers.
The first completed hardware was for the Atari 8-Bit line of computers and development
has begun for other systems (Coleco ADAM, Apple II, Commodore 64, Atari Lynx, ZX Spectrum
and more) with the goal of supporting as many old systems as possible.

What sets FujiNet apart from other WiFi devices is the new Network Device (the N Device).
The N device allows vintage computers that do not have enough processing power to handle
TCP/IP connections themselves to talk to the modern internet over WiFi. Virtual adapters
have been created for many protocols including: TCP, UDP, HTTP, FTP, TNFS, HTTPS (SSL/TLS),
SSH, TELNET, WebDAV and JSON parser.

Examples of Fujinet include:
- an esp32 adapter that plugs into an Atari 8 bit machine on the SIO port.
- an esp32 adapter that plugs into an Apple2 8 bit machine on the drive port using SmartPort protocol.
- an application running on X86 hardware that communicates over TCP 

In order to work as an application, or a library, this project follows Hardware Abstraction Layer principles.

## Layer Architecture

### 1. Device Layer (src/device/)
- Contains platform-agnostic device implementations
- Defines core traits and interfaces
- Handles protocol-specific logic
- Key components and responsibilities:
  - NetworkUrl: 
    - Parses device specifications (N[x]:protocol://...)
    - Validates unit numbers and protocols
    - Maintains URL parsing consistency across layers
    - Single source of truth for URL parsing and validation
  - DeviceManager:
    - Manages device configuration state (mode, trans, URL)
    - Does NOT manage active network connections
    - Provides device lookup and state management
    - Maintains device lifecycle state
  - ProtocolFactory:
    - Single source of truth for active network devices
    - Creates and manages protocol handlers
    - Maintains protocol handler lifecycle
    - Maps device IDs to active protocol instances
    - Owns all protocol handler instances
  - NetworkDevice:
    - Base trait for all network devices
    - Defines common device operations
    - Implemented by protocol handlers
    - Provides protocol-agnostic interface
  - Protocol Handlers:
    - Implement protocol-specific logic (HTTP, TCP, etc.)
    - Implement both NetworkDevice and protocol-specific traits
    - Handle protocol state and operations
    - Delegate actual network operations to platform layer

### 2. Platform Layer (src/platform/)
- Contains platform-specific implementations
- Implements device traits for specific platforms
- Handles platform-specific details
- Key components:
  - X86HttpClient: Platform-specific HTTP implementation
  - Platform-specific error handling
  - Platform-specific initialization
  - Network implementation details

### 3. Adapters Layer (src/adapters/)
- Provides adapters for different ways of accessing the library
- Each adapter type is isolated in its own directory
- Handles protocol-specific client interfaces
- Key responsibilities:
  - Request/response handling
  - Protocol-specific state management
  - Error mapping to protocol-specific codes
  - Resource lifecycle management

### Component Relationships
1. Manager Layer:
   - NetworkManager coordinates between DeviceManager and ProtocolFactory
   - DeviceManager handles configuration state
   - ProtocolFactory handles active network devices
   - Clear separation between state and active connections
   - No state duplication between components

2. Protocol Layer:
   - Protocol handlers implement both NetworkDevice and protocol traits
   - Platform layer provides concrete network implementations
   - Clear separation between protocol logic and network operations
   - Protocol handlers delegate to platform implementations

3. State Management:
   - Device state lives in DeviceManager
   - Active connections live in ProtocolFactory
   - URL parsing and validation in NetworkUrl
   - No duplicate state management between components
   - Clear ownership boundaries

### State Flow and Validation
1. URL Handling:
   - All URL parsing goes through NetworkUrl
   - Device specs always follow N[x]:protocol:// format
   - URLs stored without N[x]: prefix in device state
   - Protocol handlers use raw URLs without prefix
   - Consistent URL validation across layers

2. Device Lifecycle:
   - Device creation starts with NetworkManager
   - State initialized in DeviceManager
   - Protocol handler created by ProtocolFactory
   - Clear ownership and state transitions
   - Explicit cleanup on device closure

3. Error Handling:
   - Each layer has its own error types
   - Errors mapped appropriately between layers
   - Clear error responsibility per component
   - Consistent error propagation patterns

## Development Guidelines

1. Keep platform-agnostic device concept related code in device layer
2. Platform-specific code belongs in platform layer
3. Adapters are managed as sub-folders in the Adapters layer
4. C interface code belongs in FFI layer as an example adapter
5. Use existing error handling patterns
6. Follow established protocol implementation patterns
7. Maintain separation of concerns between layers
8. Use existing URL parsing and protocol handling
9. Add new protocols by extending existing patterns

10. Component Responsibility Rules:
    - DeviceManager only manages configuration state
    - ProtocolFactory is source of truth for active devices
    - Protocol handlers delegate network ops to platform
    - NetworkManager coordinates but doesn't duplicate state
    - Each component has clear, single responsibility

11. State Management Rules:
    - No duplicate state between components
    - Clear ownership of each state type
    - Explicit state transitions
    - Validate state at boundaries
    - State access through proper interfaces

12. URL Handling Rules:
    - All parsing through NetworkUrl
    - Consistent prefix handling
    - Clear URL format requirements
    - Protocol-specific URL validation
    - No ad-hoc URL parsing

13. mod.rs Rules:
    - mod.rs files should only be used for defining modules and re-exporting
    - all trait/struct/impl definitions belong on files specifically named for the particular type.

## Testing Guidelines

1. Test Organization:
   - Unit tests in the files the trait or implementation are created in
   - Integration Tests follow same layer structure as code in the "tests" subfolder
   - Each component has dedicated test suite
   - Mock implementations for dependencies
   - Test both success and error paths

2. Component Testing:
   - Test component boundaries
   - Verify state transitions
   - Check error conditions
   - Validate lifecycle management

3. Integration Testing:
   - Test component interactions
   - Verify state flow
   - Check error propagation
   - Test full request/response cycles

4. URL Testing:
   - Test all URL formats
   - Verify prefix handling
   - Check validation rules
   - Test error cases

## Error Handling

### Device Layer Errors
- DeviceError enum for platform-agnostic errors
- Protocol-specific error types
- Connection state errors
- Clear error propagation paths

### Platform Layer Errors
- Platform-specific error handling
- Maps device errors to platform errors
- Network-specific error conditions
- Consistent error mapping patterns

### Adapter Layer Errors
- Each adapter defines its own error types/codes
- Maps platform and device errors to protocol-specific errors
- Handles protocol-specific error states
- Clear error responsibility chain

## Network Protocol Support

### HTTP/HTTPS
- Base implementation in device layer
- Platform-specific implementation in platform layer
- Consistent error handling
- Clear state management

### Future Protocols
- Follow established patterns
- Maintain layer separation
- Implement required traits
- Handle protocol-specific details